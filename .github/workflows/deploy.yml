name: Deployment
on:
  push:
    branches:
      - main
      - master
jobs:
# note that the steps for cache dependencies and for install dependencies repeats
# several times across the various jobs below. This can be optimized with custom actions
# composite action
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
    #  - name: Cache dependencies
    #    id: cache
    #    uses: actions/cache@v3
    #    with:
    #      path: node_modules
    #      key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
    #  - name: Install dependencies
    #    if: steps.cache.outputs.cache-hit != 'true'
    #    run: npm ci
      - name: Load and Cache dependencies
        id: cache-deps-id
        #this is the id of this step "cache-deps-id"
        uses: ./.github/actions/cached-deps
        # this depends on where the composite action
        # if in a remote github repo:
        # dmastrop/my-composite-action
        # for a local, use a path as above
        # it will be relative to root as shown above
        # it is not relative to workflow folder
        # you do not need to specify the name of the file actions.yml 
        # github actions automatially looks for a file of this name in the path directory.
        with:
          caching: 'false'
          # we want to force no cache for lint. Since the default is 'true' (see actions.yml) we have to do this
          # the other jobs below, build and test we hit the default 'true' and should use caching.

      - name: Output information from the custom action called above (action.yml)
        run: echo "Cache used? ${{ steps.cache-deps-id.outputs.used-cache }}"   
        # this prints the output of this custom actions used above

      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
    #  - name: Cache dependencies
    #    id: cache
    #    uses: actions/cache@v3
    #    with:
    #      path: node_modules
    #      key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
    #  - name: Install dependencies
    #    if: steps.cache.outputs.cache-hit != 'true'
    #    run: npm ci
      - name: Load and Cache dependencies
        uses: ./.github/actions/cached-deps
        # NOTE: in actions.yml that the default for caching input is 'true' so this will use caching for dependencies
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
    #  - name: Cache dependencies
    #    id: cache
    #    uses: actions/cache@v3
    #    with:
    #      path: node_modules
    #      key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
    #  - name: Install dependencies
    #    if: steps.cache.outputs.cache-hit != 'true'
    #    run: npm ci
      - name: Load and Cache dependencies
        uses: ./.github/actions/cached-deps
        # NOTE: in actions.yml that the default for caching input is 'true' so this will use caching for dependencies
      - name: Build website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          path: ./dist
      - name: Output contents
        run: ls
      - name: Deploy site
        run: echo "Deploying..."